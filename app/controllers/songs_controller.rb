#autogenerated, except create2
require 'songs_helper'
class SongsController < ApplicationController
  # GET /songs
  # GET /songs.json
  skip_before_filter :authorize, only: [:new, :create]

  def index
    @songs = Song.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @songs }
    end
  end

  # GET /songs/1
  # GET /songs/1.json
  def show
    @song = Song.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @song }
    end
  end

  # GET /songs/new
  # GET /songs/new.json
  def new
    @song = Song.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @song }
    end
  end

  # GET /songs/1/edit
  def edit
    @song = Song.find(params[:id])
  end

  # POST /songs
  # POST /songs.json
  def create
    @song = Song.new(params[:song])

    respond_to do |format|
      if @song.save
        format.html { redirect_to @song, notice: 'Song was successfully created.' }
        format.json { render json: @song, status: :created, location: @song }
      else
        format.html { render action: "new" }
        format.json { render json: @song.errors, status: :unprocessable_entity }
      end
    end
    @song
  end

  #sox commands: http://www.thegeekstuff.com/2009/05/sound-exchange-sox-15-examples-to-manipulate-audio-files/
  #the mix one came from Zopieux's answer: http://stackoverflow.com/questions/5587135/sox-merge-two-audio-files-with-a-pad
  def create2#timeSpeed is either a start time or a speed.
    `cd C:/Users/Craig/rubys && md file`
    file = params[:file]
    if file
      file +=".wav"
    end
    speed = params[:speed]
    time = params[:time]
    time2 = params[:time]
    file2 = params[:file2]
    if file2
      file2 +=".wav"
    end
    if speed
      make_file "#{file}", nil, "#{speed}x#{file[0..file.length-4]}1.wav", "sox #{file} #{speed}x#{file[0..file.length-4]}1.wav speed #{speed}"
    elsif time2
      make_file "#{file}", nil, "#{file[0..file.length-4]}1.wav","sox #{file} #{file[0..file.length-4]}1.wav trim #{time} #{time2}"
    elsif time
      make_file "#{file}", "#{file2}", "#{file[0..file.length-4]+ file2[0..file2.length-4]}1.wav", "sox #{file} -p pad #{time} 0 | sox - -m #{file2} #{file[0..file.length-4]+ file2[0..file2.length-4]}1.wav"
    elsif file2
      make_file "#{file}", "#{file2}", "#{file[0..file.length-4] +'and'+file2[0..file2.length-4]}1.wav", "sox #{file} #{file2} #{file[0..file.length-4] +'and'+file2[0..file2.length-4]}1.wav"
    else
      make_file "#{file}", nil, "#{file[0..file.length-4].reverse}1.wav","sox #{file} #{file[0..file.length-4].reverse}1.wav reverse"
    end
  end

  # PUT /songs/1
  # PUT /songs/1.json
  def update
    @song = Song.find(params[:id])

    respond_to do |format|
      if @song.update_attributes(params[:song])
        format.html { redirect_to @song, notice: 'Song was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @song.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /songs/1
  # DELETE /songs/1.json
  def destroy
    @song = Song.find(params[:id])
    @song.destroy

    respond_to do |format|
      format.html { redirect_to songs_url }
      format.json { head :no_content }
    end
  end

  def make_file (oldFile, oldFile2, newFile, cmd)
    dir = `cd` #accesses the proper directory where sox.exe is
    dir = dir[0..dir.index("remixer")] #substring 0, indexOf("remixer")
    dir += "/remixer/app/assets/audios"
    str = `#{dir} && #{cmd}` #goes to sox, then executes command, making file (stores, method returns)
    special_make_song oldFile, oldFile2, newFile, cmd #makes song with file
    str
  end

  #if-elsif-else structure from http://www.howtogeek.com/howto/programming/ruby/ruby-if-else-if-command-syntax/ NOTE: 'elsif' NOT 'else if'
  def special_make_song (oldFile, oldFile2, newFile, cmd)
    #http://superuser.com/questions/271986/execute-a-command-from-another-directory-in-bash magic line (first bit)
    #http://stackoverflow.com/questions/4534372/get-lengh-of-wav-from-sox-output magic line source (end bit)
    dir = `cd`
    dir = dir[0..dir.index("remixer")]
    dir += "/remixer/app/assets/audios"
    length = Integer(`#{dir} && sox #{newFile} -n stat 2>&1 | sed -n 's#^Length (seconds):[^0-9]*\([0-9.]*\)$#\1#p'`) #returns length
    file = oldFile
    old = Song.find(:file)
        if cmd.index("reverse") != nil #reverse
      Song.new(newFile[0...newFile.lenth-5], artist: (old.artist), description: ('Backwards:'+old.description), file: (newfile), length: (length))
    elsif cmd.index("speed") != nil #speed altering
      Song.new(newFile[0...newFile.lenth-5], artist: (old.artist), description: ('Morphed:'+old.description), file: (newfile), length: (length))
    elsif  cmd.index("-t") != nil #trimming
      Song.new(newFile[0...newFile.lenth-5], artist: (old.artist), description: ('Shortened:'+old.description), file: (newfile), length: (length))
    else
      file = file2
      old2 = Song.find(:file)
      if cmd.index("-m") == nil #combining
        Song.new(title: ("#{old.title}and#{old2.title}1"), artist: ("#{old.artist} and #{old2.artist}"), description: ("Back to back: #{old.description} #{old2.description}"), file: (newFile), length: (length))
      else #mixing
        Song.new(title: (old.title+old2.title+"1"), artist: (old.artist+" and "+old2.artist), description: ("All at once: "+old.description+" "+old2.description), file: (newFile), length: (length))
      end
    end
  end
end
